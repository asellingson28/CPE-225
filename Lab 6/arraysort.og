.globl swap 
.globl selectionSort
 
#void selectionSort(int arr[], int i, int n){
selectionSort:
# callee setup goes here
# a0 = arr
# a1 = i
# a2 = n

    # /* find the minimum element in the unsorted subarray `[i…n-1]`
    # // and swap it with `arr[i]`  */
    
#    int j;
mv t0, a1

#    int min = i; # min = t1
mv t1, a1

#    for (j = i + 1; j < n; j++)    {
for:

#j = i + 1;
addi t0, t0, 1


forloop:
# j < n
bgeu t0, a2, endfor

#        /* if `arr[j]` is less, then it is the new minimum */
#        if (arr[j] < arr[min]) {

# define arrmin
# defmine arrj

slli t3, t0, 2        # Multiply j by 4 (assuming 4-byte integers)
add t3, a0, t3
lw t2, 0(t3)          # t2 = arr[j]

slli t4, t1, 2        # Multiply min by 4
add t4, a0, t4
lw t5, 0(t4)          # t5 = arr[min]

bge t2,t5, endfor
if1:
#            min = j;    /* update the index of minimum element */
mv t1, t0

#        }
endif1:
addi t0, t0, 1 # j++
j forloop
#    }

endfor:
 
#    /* swap the minimum element in subarray `arr[i…n-1]` with `arr[i] */
#    swap(arr, min, i);

#caller setup and subroutine call for swap goes here.

#caller teardown for swap goes here (if needed).
 
#    if (i + 1 < n) {
if2:


#        selectionSort(arr, i + 1, n);
#caller setup and subroutine call for selectionSort goes here.

#caller teardown for selectionSort goes here (if needed).



#    }
endif2:

	
# callee teardown goes here


#}

 

#/* Utility function to swap values at two indices in an array*/
#void swap(int arr[], int i, int j) {
swap: 
# swap callee setup goes here

#    int temp = arr[i];


#    arr[i] = arr[j];


#    arr[j] = temp;


# swap callee teardown goes here



#}
